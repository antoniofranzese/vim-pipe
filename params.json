{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"UA-10319773-15","name":"Vim-pipe","tagline":"Send a vim buffer through a command and instantly see the output.","body":"# Vim Pipe\r\n\r\n## Overview\r\n\r\nDo you do this?\r\n\r\n```\r\n        hack <---------- alt-tab <---------- react\r\n          |                                    |\r\n+-------------------+                +-------------------+\r\n| code code         |                | result result     |\r\n| code              |                | result            |\r\n|                   |                |                   |\r\n|                   |                |                   |\r\n|                   |                |                   |\r\n|                   |                |                   |\r\n|                   |                |                   |\r\n+-------------------+                +-------------------+\r\n          |                                    |\r\n         :w -----------> alt-tab ---------> invoke\r\n```\r\n\r\nThis plugin lets you do this instead:\r\n\r\n```\r\n+-------------------+\r\n| code code         |\r\n| code              |---------\\\r\n|                   |         |\r\n|-------------------|   <LocalLeader>r\r\n| result result     |         |\r\n| result            |<--------/\r\n|                   |\r\n+-------------------+\r\n```\r\n\r\nWhich saves tonnes of time. It's even faster than using screen or tmux.\r\n\r\nIt's useful for developing SQL queries, fast HTML previews, markdown-checking,\r\nand anything that needs to pass through a shell command while you develop.\r\n\r\n## Detail\r\n\r\nYou associate a shell command with your file, something that will take your\r\nbuffer on STDIN and show the result on STDOUT. For example, if you're editing an\r\nSQL query, that command might be `psql mydatabase`.\r\n\r\nHaving done that, `<LocalLeader>r` will run the current buffer against that\r\ncommand and show you the results. You no longer need to\r\nsave-switch-execute-switch, which makes life faster and easier.\r\n\r\n## Installation\r\n\r\n* Install [Pathogen][pathogen]. (You're already using Pathogen, right?)\r\n* Clone this project into `~/.vim/bundle/`.\r\n* Set a `b:vimpipe_command` variable for your buffer. The easiest way is to add\r\nan autocommand based on FileType. For example, in your `.vimrc` file:\r\n\r\n```vim\r\nautocmd FileType sql       :let b:vimpipe_command=\"psql mydatabase\"\r\nautocmd FileType markdown  :let b:vimpipe_command=\"multimarkdown\"\r\n```\r\n\r\nSee below for various examples.\r\n\r\n## Usage & Tips\r\n\r\nOnce `b:vimpipe_command` is configured, type `<LocalLeader>r` to get the list\r\nresults.  There's no need to save the file first. It works on the current\r\nbuffer, not the contents on disk.\r\n\r\n### PostgreSQL\r\n```vim\r\nautocmd FileType sql       :let b:vimpipe_command=\"psql mydatabase\"\r\n```\r\n\r\nSee also [vim-postgresql-syntax][vim-postgresql-syntax].\r\n\r\n### Oracle\r\n\r\nIf you have an OPS$ login, it's as simple as:\r\n```vim\r\nautocmd FileType sql :let b:vimpipe_command=\"sqlplus -s /\"\r\n```\r\n\r\n### HTML\r\n\r\nThis is only text-based, obviously, but can still speed up initial development.\r\n```vim\r\nautocmd FileType html :let b:vimpipe_command=\"lynx -dump -stdin\"\r\n```\r\n\r\n### Markdown\r\n\r\nFast-preview the HTML:\r\n\r\n```vim\r\nautocmd FileType mkd :let b:vimpipe_command=\"multimarkdown\"\r\nautocmd FileType mkd :let b:vimpipe_filetype=\"html\"\r\n```\r\n\r\nOr combine wth the HTML tip to preview the rendered result:\r\n\r\n```vim\r\nautocmd FileType mkd :let b:vimpipe_command=\"multimarkdown | lynx -dump -stdin\"\r\n```\r\n\r\n### MongoDB\r\n\r\nIs there an official FileType for MongoDB query files? Let's say it's `mongoql`, for all files `*.mql`:\r\n\r\n```vim\r\nautocmd BufNewFile,BufReadPost *.mql setlocal filetype=mongoql\r\n\r\nautocmd FileType mongoql :let b:vimpipe_command=\"mongo\"\r\nautocmd FileType mongoql :let b:vimpipe_filetype=\"json\"\r\n```\r\n\r\nThen try editing a file called `somequery.mql` with something like this in:\r\n\r\n```\r\nuse books;\r\ndb.book.find( null, {author: 1, title: 1 });\r\ndb.runCommand( {dbStats: 1} );\r\n```\r\n\r\n## Help\r\n\r\nSee `:help vim-pipe` for more.\r\n\r\n## Credits\r\n\r\nThanks to Steve Losh for his excellent guide to Vimscript, [Learn Vimscript the Hard Way][learnvim], and Meikel Brandmeye of [vimclojure][vimclojure] for the inspiration.\r\n\r\n[pathogen]: https://github.com/tpope/vim-pathogen/\r\n[learnvim]: http://learnvimscriptthehardway.stevelosh.com/\r\n[vimclojure]: https://github.com/kotarak/vimclojure\r\n[vim-postgresql-syntax]: https://github.com/krisajenkins/vim-postgresql-syntax\r\n"}